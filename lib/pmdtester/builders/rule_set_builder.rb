require 'nokogiri'
require_relative '../cmd'
module PmdTester
  # This class is responsible for generation dynamic configuration
  # according to the difference between base and patch branch of Pmd.
  class RuleSetBuilder
    ALL_RULE_SETS = Set['bestpractices', 'codestyle', 'design', 'documentation', 'errorprone',
                        'migrating', 'multithreading', 'performance', 'regex', 'security'].freeze
    PATH_TO_PMD_JAVA_BASED_RULES =
      'pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/'.freeze
    PATH_TO_PMD_XPATH_BASED_RULES = 'pmd-java/src/main/resources/category/java/'.freeze
    PATH_TO_ALL_JAVA_RULES = 'config/all-java.xml'.freeze
    PATH_TO_DYNAMIC_CONFIG = 'target/dynamic-config.xml'.freeze
    NO_JAVA_RULES_CHANGED_MESSAGE = 'No java rules have been changed!'.freeze

    def initialize(options)
      @options = options
    end

    def build
      filenames = diff_filenames
      rule_sets = get_rule_sets(filenames)
      build_config_file(rule_sets)

      # return filter set
      if rule_sets.size.eql?(ALL_RULE_SETS.size)
        nil # if `rule_sets` contains all rule sets, than no need to filter the baseline
      else
        rule_sets
      end
    end

    def diff_filenames
      filenames = nil
      Dir.chdir(@options.local_git_repo) do
        diff_cmd = "git diff --name-only #{@options.base_branch}..#{@options.patch_branch}"
        grep_cmd = "grep -E '^pmd-(core|java)/'" # OPTIMIZE: extend other languages
        filenames = Cmd.execute("#{diff_cmd} | #{grep_cmd}")
      end
      filenames.split("\n")
    end

    def get_rule_sets(filenames)
      rule_sets = Set[]
      filenames.each do |filename|
        if filename.start_with?(PATH_TO_PMD_JAVA_BASED_RULES, PATH_TO_PMD_XPATH_BASED_RULES)
          add_rule_set(rule_sets, filename)
        else
          rule_sets = ALL_RULE_SETS
          break
        end
      end
      rule_sets
    end

    def add_rule_set(rule_sets, filename)
      ALL_RULE_SETS.each do |rule_set|
        unless filename.index(rule_set).nil?
          rule_sets.add(rule_set)
          break
        end
      end
    end

    def build_config_file(rule_sets)
      if rule_sets.empty?
        puts NO_JAVA_RULES_CHANGED_MESSAGE
        exit 0
      end

      doc = Nokogiri::XML(File.read(PATH_TO_ALL_JAVA_RULES))
      doc.search('rule').each do |rule|
        rule.remove unless match_ref?(rule, rule_sets)
      end

      description = doc.at_css('description')
      description.content = 'The ruleset generated by PmdTester dynamically'

      write_dynamic_file(doc)
    end

    def match_ref?(rule_node, rule_sets)
      rule_sets.each do |rule_set|
        return true unless rule_node['ref'].index(rule_set).nil?
      end

      false
    end

    def write_dynamic_file(doc)
      File.open(PATH_TO_DYNAMIC_CONFIG, 'w') do |x|
        x << doc.to_s.gsub(/\n\s+\n/, "\n")
      end
      @options.base_config = PATH_TO_DYNAMIC_CONFIG
      @options.patch_config = PATH_TO_DYNAMIC_CONFIG
    end

    def remove_empty_lines(doc)
      doc.css('')
    end
  end
end
